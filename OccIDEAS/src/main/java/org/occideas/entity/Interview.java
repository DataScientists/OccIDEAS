package org.occideas.entity;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.SelectBeforeUpdate;

/**
 * Interview generated by hbm2java
 */
@Entity
@DynamicUpdate(value=true)
@DynamicInsert(value=true)
@SelectBeforeUpdate(value=true)
public class Interview implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@Id @GeneratedValue
	private long idinterview;
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="module_idNode",referencedColumnName="idNode")
	private Module module;
	
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="fragment_idNode",referencedColumnName="idNode")
	private Fragment fragment;
	
	/*@OneToMany(fetch = FetchType.EAGER)
	@Cascade(value={CascadeType.SAVE_UPDATE,CascadeType.PERSIST})
	@JoinTable(
            name="Interview_Question_Answer",
            joinColumns = @JoinColumn( name="interview_idinterview"),
            inverseJoinColumns = @JoinColumn( name="id")
    )*/
	@OneToMany(mappedBy="idInterview",targetEntity=InterviewQuestionAnswer.class)
	@Cascade(value={CascadeType.SAVE_UPDATE,CascadeType.PERSIST})
	private List<InterviewQuestionAnswer> interviewQuestionAnswers;
	
	@ManyToMany(fetch=FetchType.LAZY)
	@Cascade(value={CascadeType.SAVE_UPDATE,CascadeType.PERSIST})
    @JoinTable(name="Interview_FiredRules", 
                joinColumns={@JoinColumn(name="idinterview")}, 
                inverseJoinColumns={@JoinColumn(name="idRule")})
	private List<Rule> firedRules;
	
	@ManyToMany(fetch=FetchType.LAZY)
	@Cascade(value={CascadeType.SAVE_UPDATE,CascadeType.PERSIST})
    @JoinTable(name="Interview_AutoAssessedRules", 
                joinColumns={@JoinColumn(name="idinterview")}, 
                inverseJoinColumns={@JoinColumn(name="idRule")})
	private List<Rule> autoAssessedRules;
	
	@ManyToMany(fetch=FetchType.LAZY)
	@Cascade(value={CascadeType.SAVE_UPDATE,CascadeType.PERSIST})
    @JoinTable(name="Interview_ManualAssessedRules", 
                joinColumns={@JoinColumn(name="idinterview")}, 
                inverseJoinColumns={@JoinColumn(name="idRule")})
	private List<Rule> manualAssessedRules;
	
	private String referenceNumber;

	public Interview() {
	}
	
	public Interview(long idinterview) {
		this.idinterview = idinterview;
	}	

	public long getIdinterview() {
		return this.idinterview;
	}

	public void setIdinterview(long idinterview) {
		this.idinterview = idinterview;
	}

	public Module getModule() {
		return module;
	}

	public void setModule(Module module) {
		this.module = module;
	}

	public String getReferenceNumber() {
		return referenceNumber;
	}

	public void setReferenceNumber(String referenceNumber) {
		this.referenceNumber = referenceNumber;
	}

	public Fragment getFragment() {
		return fragment;
	}

	public void setFragment(Fragment fragment) {
		this.fragment = fragment;
	}

	public List<InterviewQuestionAnswer> getInterviewQuestionAnswers() {
		return interviewQuestionAnswers;
	}

	public void setInterviewQuestionAnswers(List<InterviewQuestionAnswer> interviewQuestionAnswers) {
		this.interviewQuestionAnswers = interviewQuestionAnswers;
	}

	public List<Rule> getFiredRules() {
		return firedRules;
	}

	public void setFiredRules(List<Rule> firedRules) {
		this.firedRules = firedRules;
	}

	public List<Rule> getAutoAssessedRules() {
		return autoAssessedRules;
	}

	public void setAutoAssessedRules(List<Rule> autoAssessedRules) {
		this.autoAssessedRules = autoAssessedRules;
	}

	public List<Rule> getManualAssessedRules() {
		return manualAssessedRules;
	}

	public void setManualAssessedRules(List<Rule> manualAssessedRules) {
		this.manualAssessedRules = manualAssessedRules;
	}

}
